# -*- coding: utf-8 -*-
"""Calculo regressao linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ylAJ6qqEdAlaQDuJgN9qf-J9XeSudlSu
"""



import numpy as np
import statsmodels.api as sm

print("Numpy versão:", np.__version__)
print("Statsmodels versão:", sm.__version__)

import numpy as np
import statsmodels.api as sm

# Dados fornecidos
altura = np.array([1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3,
                   3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3,
                   5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0])

V1 = np.array([255, 259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 270, 273, 260, 279,
               280, 300, 310, 328, 350, 357, 337, 360, 890, 3300, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 3990, 3490, 3200, 2900, 2100, 990, 289, 260])

V2 = np.array([230, 235, 240, 240, 240, 240, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 245, 247, 250, 298,
               367, 470, 498, 510, 890, 1920, 3990, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 3900, 2000, 490, 300, 293, 281, 279, 258, 258, 230, 234, 223])

V3 = np.array([235, 240, 240, 240, 240, 240, 240, 240, 240, 247, 247, 247, 247, 247, 247, 300, 1900, 2300, 2390, 3100,
               3450, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 233, 244, 231])

V4 = np.array([250, 620, 630, 620, 620, 620, 639, 780, 900, 1200, 1500, 3000, 3800, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 3500, 2600, 1090, 798, 630, 489, 330, 300,
               280, 279, 279, 279, 279, 279, 279, 279, 279, 279, 268, 268, 268, 268, 247, 245, 243])

V5 = np.array([306, 2100, 3280, 3900, 4090, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 3300, 2880, 500, 310, 300, 290, 293, 289, 280, 270, 270,
               270, 270, 267, 265, 265, 265, 265, 265, 265, 265, 267, 259, 268, 268, 268, 268, 244, 244, 240])

# Verificar se todos têm o mesmo comprimento
lengths = [len(arr) for arr in [V1, V2, V3, V4, V5]]
print("Comprimentos das variáveis independentes:", lengths)

# Ajustar o comprimento dos dados (se necessário)
min_length = min(lengths)
altura = altura[:min_length]
X = np.column_stack([V1[:min_length], V2[:min_length], V3[:min_length], V4[:min_length], V5[:min_length]])

# Adicionando a constante (intercepto)
X = sm.add_constant(X)

# Modelo de regressão linear múltipla
model = sm.OLS(altura, X).fit()

# Resultados
print(model.summary())

# Exibir os coeficientes
print("Coeficientes:")
print(model.params)

# Exibir o valor de R²
print("R²:")
print(model.rsquared)

# Exibir os p-valores
print("p-valores:")
print(model.pvalues)

import numpy as np
import statsmodels.api as sm

# Novos dados fornecidos
altura = np.array([1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3,
                   3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3,
                   5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0])

V1 = np.array([255, 259, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 270, 273, 260, 279,
               280, 300, 310, 328, 350, 357, 337, 360, 890, 3300, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 3990, 3490, 3200, 2900, 2100, 990, 289, 260])

V2 = np.array([230, 235, 240, 240, 240, 240, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 245, 247, 250, 298,
               367, 470, 498, 510, 890, 1920, 3990, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
               4095, 4095, 4095, 4095, 4095, 4095, 4095, 3900, 2000, 490, 300